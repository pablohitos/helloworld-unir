pipeline {
    agent any

    options { skipDefaultCheckout() }

    stages {
        stage('Get Code') {
            agent { label 'agent1' }
            steps {
                script {
                    echo 'Identificando entorno de ejecución:'
                    bat 'whoami'
                    bat 'hostname'
                    bat 'echo %WORKSPACE%'
                }
                git 'https://github.com/pablohitos/helloworld-unir'
                bat 'dir'
                stash name: 'code', includes: '**'
            }
        }

        stage('Test Suite Paralelo') {
            parallel {
                stage('Static') {
                    agent { label 'agent2' }
                    steps {
                        unstash 'code'
                        script {
                            echo 'Identificando entorno de ejecución:'
                            bat 'whoami'
                            bat 'hostname'
                            bat 'echo %WORKSPACE%'
                        }
                        bat '''
                            flake8 --format=pylint --exit-zero app > flake8.out
                        '''
                        recordIssues tools: [
                            flake8(name: 'Flake8', pattern: 'flake8.out')
                        ],
                        qualityGates: [
                            [threshold: 8, type: 'TOTAL', unstable: true],
                            [threshold: 10, type: 'TOTAL', unstable: false]
                        ]
                    }
                }

                stage('Security') {
                    agent { label 'agent3' }
                    steps {
                        unstash 'code'
                        script {
                            echo 'Identificando entorno de ejecución:'
                            bat 'whoami'
                            bat 'hostname'
                            bat 'echo %WORKSPACE%'
                        }
                        bat '''
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        recordIssues tools: [
                            pyLint(name: 'Bandit', pattern: 'bandit.out')
                        ],
                        qualityGates: [
                            [threshold: 2, type: 'TOTAL', unstable: true],
                            [threshold: 4, type: 'TOTAL', unstable: false]
                        ]
                    }
                }

                stage('Coverage') {
                    agent { label 'agent2' }
                    steps {
                        unstash 'code'
                        script {
                            echo 'Identificando entorno de ejecución:'
                            bat 'whoami'
                            bat 'hostname'
                            bat 'echo %WORKSPACE%'
                        }
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            bat '''
                                set PYTHONPATH=.
                                coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                                coverage xml
                                pytest --junitxml=result-unit.xml test\\unit
                            '''
                            cobertura coberturaReportFile: 'coverage.xml',
                                      autoUpdateHealth: false,
                                      autoUpdateStability: false,
                                      lineCoverageTargets: '85,95',
                                      conditionalCoverageTargets: '80,90'
                            junit 'result-unit.xml'
                        }
                    }
                }
            }
        }

        stage('Rest') {
            agent { label 'agent2' }
            steps {
                unstash 'code'
                script {
                    echo 'Identificando entorno de ejecución:'
                    bat 'whoami'
                    bat 'hostname'
                    bat 'echo %WORKSPACE%'
                }
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        set FLASK_APP=app/api.py
                        set PYTHONPATH=.

                        start /B python -m flask run
                        ping -n 6 127.0.0.1 >nul

                        start /B java -jar C:\\Users\\pablo\\wiremock\\wiremock-standalone-3.4.2.jar --port 9090 --root-dir C:\\Users\\pablo\\wiremock
                        ping -n 10 127.0.0.1 >nul

                        pytest --junitxml=result-rest.xml test\\rest
                    '''
                    junit 'result-rest.xml'
                }
            }
        }

        stage('Performance') {
            agent { label 'agent3' }
            steps {
                unstash 'code'
                script {
                    echo 'Identificando entorno de ejecución:'
                    bat 'whoami'
                    bat 'hostname'
                    bat 'echo %WORKSPACE%'
                }
                bat '''
                    set PYTHONPATH=.

                    start /B python app\\api.py
                    ping -n 6 127.0.0.1 >nul

                    C:\\Users\\pablo\\jmeter\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finalizado'
        }
    }
}